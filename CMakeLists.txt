#cmake directives

CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0 FATAL_ERROR)
SET(CMAKE_MODULE_PATH "./cmake_modules/")

#setting link directory policy

IF(COMMAND cmake_policy)
  CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

#taken from http://www.cmake.org/pipermail/cmake/2006-February/008334.html

MACRO(SET_COMPILE_FLAGS TARGET)
  SET(FLAGS)
  FOREACH(flag ${ARGN})
    SET(FLAGS "${FLAGS} ${flag}")
  ENDFOREACH(flag)
  SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS "${FLAGS}")
ENDMACRO(SET_COMPILE_FLAGS)

#Generalized library building function for all C++ libraries
FUNCTION(BUILD_LIBS LIB_NAME LIB_TYPES SRCS LINK_LIBS CXX_DEFINES)
  FOREACH(LIB_TYPE ${LIB_TYPES})
    SET(CURRENT_LIB ${LIB_NAME}_${LIB_TYPE})
    ADD_LIBRARY (${CURRENT_LIB} ${LIB_TYPE} ${SRCS})

    SET_TARGET_PROPERTIES (${CURRENT_LIB} PROPERTIES OUTPUT_NAME ${LIB_NAME})
    SET_TARGET_PROPERTIES (${CURRENT_LIB} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
    SET_TARGET_PROPERTIES (${CURRENT_LIB} PROPERTIES VERSION ${LIBRARY_VERSION})

    #optional arguments
    IF(LINK_LIBS)
      FOREACH(LINK_LIB ${LINK_LIBS})
		TARGET_LINK_LIBRARIES(${CURRENT_LIB} ${LINK_LIB})
      ENDFOREACH(LINK_LIB)
    ENDIF(LINK_LIBS)

    #cpp defines
    IF(CXX_DEFINES)
      SET_COMPILE_FLAGS(${CURRENT_LIB} ${CXX_DEFINES})
    ENDIF(CXX_DEFINES)

	#installation for non-windows platforms
    IF(NOT WIN32)
      INSTALL(TARGETS ${CURRENT_LIB} LIBRARY DESTINATION ${LIBRARY_INSTALL_DIR} ARCHIVE DESTINATION ${LIBRARY_INSTALL_DIR})
    ENDIF(NOT WIN32)

    #rewrite of install_name_dir in apple binaries
    IF(APPLE)
      SET_TARGET_PROPERTIES(${CURRENT_LIB} PROPERTIES INSTALL_NAME_DIR ${LIBRARY_INSTALL_DIR})
    ENDIF(APPLE)
  ENDFOREACH(LIB_TYPE)
ENDFUNCTION(BUILD_LIBS)

FUNCTION(BUILD_EXES EXE_NAME SRCS LINK_LIBS LINK_FLAGS DEFINES SHOULD_INSTALL)
  ADD_EXECUTABLE(${EXE_NAME} ${SRCS})
  SET_TARGET_PROPERTIES (${EXE_NAME} PROPERTIES OUTPUT_NAME ${EXE_NAME}${LIBNIFALCON_POSTFIX})
  IF(DEFINES)
    SET_COMPILE_FLAGS(${EXE_NAME} ${DEFINES})
  ENDIF(DEFINES)
  IF(LINK_FLAGS)
    SET_TARGET_PROPERTIES(${EXE_NAME} PROPERTIES LINK_FLAGS ${LINK_FLAGS})
  ENDIF(LINK_FLAGS)

  TARGET_LINK_LIBRARIES(${EXE_NAME} ${LINK_LIBS})
  IF(NOT WIN32 AND SHOULD_INSTALL)
    INSTALL(TARGETS ${EXE_NAME} RUNTIME DESTINATION ${RUNTIME_INSTALL_DIR})
  ENDIF(NOT WIN32 AND SHOULD_INSTALL)
ENDFUNCTION(BUILD_EXES)

SET(BUILD_TYPES STATIC SHARED)

PROJECT(LIBVIRTUALHOLE)
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)
SET(LIBRARY_VERSION 1.0)
SET(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
SET(PROJECT_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
FIND_PACKAGE(libftd2xx)
FIND_PACKAGE(libftdi)

IF(UNIX)
  IF(NOT PREFIX_DIR)
    SET(PREFIX_DIR /usr/local)
  ENDIF(NOT PREFIX_DIR)
  IF(NOT INCLUDE_INSTALL_DIR)
    SET(INCLUDE_INSTALL_DIR ${PREFIX_DIR}/include)
  ENDIF(NOT INCLUDE_INSTALL_DIR)
  IF(NOT LIBRARY_INSTALL_DIR)
    SET(LIBRARY_INSTALL_DIR ${PREFIX_DIR}/lib)
  ENDIF(NOT LIBRARY_INSTALL_DIR)
  IF(NOT RUNTIME_INSTALL_DIR)
    SET(RUNTIME_INSTALL_DIR ${PREFIX_DIR}/bin)
  ENDIF(NOT RUNTIME_INSTALL_DIR)
ENDIF(UNIX)

MESSAGE(STATUS "Install Directory Prefix: ${PREFIX_DIR}")
MESSAGE(STATUS "Include Install Directory: ${INCLUDE_INSTALL_DIR}")
MESSAGE(STATUS "Library Install Directory: ${LIBRARY_INSTALL_DIR}")
MESSAGE(STATUS "Runtime Install Directory: ${RUNTIME_INSTALL_DIR}")

IF(SET_BUILD_RPATH)
  # use, i.e. don't skip the full RPATH for the build tree
  SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
  
  # when building, don't use the install RPATH already
  # (but later on when installing)
  SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
  
  # the RPATH to be used when installing
  SET(CMAKE_INSTALL_RPATH "${LIBRARY_INSTALL_DIR}")
  
  # add the automatically determined parts of the RPATH
  # which point to directories outside the build tree to the install RPATH
  SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
ENDIF(SET_BUILD_RPATH)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(examples/virtualhole_test)
